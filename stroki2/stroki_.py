#!/usr/bin/evn python3.12
from matplotlib import pyplot as plt
input("\t \tПереходим к строкам!")

img = plt.imread('/home/bsg/Desktop/shkola/Kurs_piton/stroki/stroki.png')
plt.imshow(img)
plt.show()

input("""Операции со строками.
В питоне строки можно проделовать такие операции как складывать '+' и умножать'*'
Называется это КАНТАЭНАЦИЯ.
Предположим у нас есть переменная a, b, c
a = 'Hello'
b = 'World'
c = '!'
print(a + b + c)
HelloWorld! #В выводе все слитно и не понятно.
Для того что-бы все исправить не забываем за пробелы, выглядит это следующим образом ' '
print(a + ' ' + b + ' ' + c)
Hello World !""")

def clearShell():
    import os
    os.system(['clear', 'cls'][os.name == os.sys.platform])
clearShell()

input("""А еще строки можно умножать между собой.
a = 'Hello'
b = 'World'
c = '!'
print(a + ' ' + b + ' ' + (c * 3))# Умножения нужно делать в первую очередь,
так-как умноженные данные должны быть уже подготовлены. Ведь питон 
выполняет код строчка за строчкой, с лева на права.
Hello World !!!\t# У нас уже получилось 3 восклицательных знака.
print(a + ' ' + b + ' ' + с * 3)# Это выдаст ошибку в которой сказанно имя 'с' не определенно.
\nFile "<stdin>", line 1, in <module>
NameError: name 'с' is not defined 
""")

img = plt.imread('/home/bsg/Desktop/shkola/Kurs_piton/stroki/operacii_strok.png')
plt.imshow(img)
plt.show()

input("""Также можно посчитать символы в строке, прошу не забывать пробел
так-же является обьектом.
a = 'Hello'
b = 'World'
c = '!'
print(len(a + ' ' + b + ' ' + (c * 3)))
15
Что-бы было понятней создадим еще одну переменную 's' и присвоим значения всего уровнения
s = a + ' ' + b + ' ' + (c * 3)
print(s)
Hello World !!!
print(len(s))
15 \t# Получилось 15 символов
И пока мы в самом подходящем моменте 'Hello World' записанно на английском языке,
но можно на выводе писать каким угодно языком будь-то Украинский, Русский, Японский
и т.д. и т.п.""")
input("""\tТак-же в строках можно записовать и числа.
x = 15
y = 21
a = x + y
print(a)
36
type(a)
<class 'int'> \t# это тип данных integer-int
теперь преаброзуем в строки
x = '15'
y = '21'
print((typex + y))
1521
<class 'str'>
""")

def clearShell():
    import os
    os.system(['clear', 'cls'][os.name == os.sys.platform])
clearShell()

input("""\t \t \tПерейдем к индексам!!!
Индексы производятся в квадратных скобках '[]' и в эти скобки нужно вставить 
цыфру. Индекты начинаются считаться с 0. На пример: переменная x = 'гном'
x[0]
'г'
x[1]
'н'
Что-бы дойти от начала до конца пользуемся ':' это по срезу 
x[:2]\t# по соображениям должно быть 3 буквы 'гно', но в таких случаях последний номер
среза не включается в интэрвал
'гн'
Если-же нам нужно взять от нулевого и до последнего символа тогда нужно [::] тоисть
x[::]
'гном'
Бывают случаи что нужны последние символы, тогда идем с минусом '-' только уже не с
нуля, а с еденицы [-1]
x[-1]
'м'""")

def clearShell():
    import os
    os.system(['clear', 'cls'][os.name == os.sys.platform])
clearShell()

img = plt.imread('/home/bsg/Desktop/shkola/Kurs_piton/stroki/indeksaciy.png')
plt.imshow(img)
plt.show()

input("""\t\tРасмотрим некоторые функции со строками.
Создадим переменную 'st'
st = 'Наш Расвет'
Применим метод 'lower()' который, буквы верхнего регистра преобразует в нижний
st.lower()\t# Изначально имя переменной, далее через точку метод 'st.lower()
'наш расвет'\n Можно проверить является ли строка числом. Для этого применяем метод .isdigit()
st.isdigit()
False# False это тип данных, его противоположная сторона True
'45'.isdigit()
True
Метод .find() выводит номер индекса искомой буквы, .find() делает тоже самое, толоко подсчет идет с конца
st.find('в')
st.rfind('в')
Если же нет в списке искомой буквы выдаст '-1'""")

img = plt.imread('/home/bsg/Desktop/shkola/Kurs_piton/stroki/fanchen_stroki.png')
plt.imshow(img)
plt.show()
